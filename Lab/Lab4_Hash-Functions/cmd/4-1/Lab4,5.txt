
Nhắc các bạn nộp bài Lab 4.5
https://docs.google.com/forms/d/e/1FAIpQLSfASlgyab10MMClVkXp0fcPeLOQ23a28KCLDPIgYVh99EpmFg/viewform
Deadline: 6/7/2024
LAB 4: PKI and Hash Functions
Task 4.1: Hash Functions
Required:
+) Separation all hash functions(using command-line or GUI)
SHA224, SHA256, SHA384, SHA512, SHA3-224, SHA3-256, SHA3-384, SHA3-512, SHAKE128, SHAKE256
+) Plaintext:
    - Support Vietnamese (UTF-8)
    - Input from screen or from file (using command-line or GUI)
+) Digest:
    - may choose digest output length d for SHAKE128,SHAKE256 from command-line arguments;
    - digest should be encoded as hex string án save to file or print to screen;
 +) OS platforms
  - Your code can compile on both Windows and Linux;
+) Performance
  - Report your hardware resources
  - Report computation performance for all operations on both Windows and Linux with different input size;
Task 4.2: PKI and digital certificate
code your tool using cryptopp or openssl that can
    - Parse all the fields of a X.509 certificate, including subject name, issuer name, subject public key, signature, signature algorithms and its parameters, purposes, valid from and valid to dates, ...
    - Check the validate of the signature;
  Required:
       Input certificate from the file inform PEM (Base64) or DER (binary);
       Output: return subject public key if the signature is valid and null otherwise;
LAB 4.3: Collision and length extension attacks on Hash functions
Required:
+) MD5 collision attacks
+) Two collision messages have the same prefix string
 - Generate yourself prefix string
 - Compute the two output files that have the same MD5 digest (using hashclash tool)
+) Two different C++ programs but have the same MD5;
 - Code yourself two short C++ programs
 - Compiler your codes code1, code2
 - Run hashclash to generate two program with the same MD5 digest
Note: It takes long time to generate the output.
Task 4.4 Length extension attacks on MAC  in form: H(k||m), k is secret key
+) show length extension attacks on MAC using SHA1, SHA256, SHA512 using hashpump tool;
+) Coding self programs that can attacks on MAC using SHA256 (for bonus 5/100 points)
 - Automatic compute the padded part for any input (k||m);
 - Compute the digest using length extension attacks with any extend string;
Task 4.5 attack on digital certificate (for bonus 10/100 points)
 - generate a digital certificate using MD5 and RSA using openssl;
 - compute an other digital certificate with the same signature but other subject using hashclash tool

Report Lab 4
Write your report in word file including:
  1. Report your hardware resources;
  2. Report computation performance on Windows and Linux (in table with capture image on running your program);
    - Generate a set of different input sizes (at least 5 inputs in size MBs up to GBs) for hash function
    - Execute your code and check the computation time on average 1000 running times for hash function;
    - The other result files for other tasks;  
    - Summarize the results in a tables including: size of input, OS (Windows, Linux), operation time.
    - Do a comparison and your comments on both input size and OS;

LAB 5: Digital signature with CryptoPP/Openssl
Required:
+) Algorithm: ECDSA, RSAPSS
+) Three module: key generation, signing and the verify functions (using command-line or GUI)
1) Key generation
  Publickey, Privae  Key;
  Save to file s (der, pem);
2) signing function
    - May adopt library or direct compute from formulas.
    - Deploy directly from formulas will get 15/100 bonus points.
+) Message to sign
    - Input from file or screen
    - Support Vietnamese (using UTF-8)
+) secret key
   - Input from file
3) Verify function
+) Message and signature
    - Input from files
    - Support Vietnamese (using UTF-8)
+) public key key
   - Input from file

4) ECC curve:  should select from standard curves
+) Secret key/public key
    - The keys load from files (for both two functions and arguments in C++/C# in terminal or GUI)
    - The public key: >= 256 bits
+) OS platforms
  - Your code can compile on both Windows and Linux;
Report Lab 5
Write your report in word file including:
  1. Report your hardware resources;
  2. Report computation performance on Windows and Linux (in table with capture image on running your program);
    - Report computation performance for all operations on both Windows and Linux with different input size;
    on average 1000 running times for hash function;
     
    - Summarize the results in a tables including: size of input, OS (Windows, Linux), operation time (sign, verify).
    - Do a comparison and your comments on both input size and OS;
 
Submit Lab 4, 5:
- your codes
- your compile files
- your report
Compress (rar or zip) all in one file with name in the form: Studentnumber-lab4,5.rar
Deadline: 6/7/2024

